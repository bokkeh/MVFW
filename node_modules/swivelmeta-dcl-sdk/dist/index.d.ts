/// <reference types="dcl" />
/// <reference types="env" />

/**
 * Debug message displays a UI prompt with a message and a button to close it.
 *
 * @param message - The message to be displayed in the UI prompt
 * @public
 */
export declare function debugMessage(message: string): void;

/**
 * TODO: Need to convert VideoScreen class to a MediaEntity to handle different types of media, not just videoScreen
 * TODO: Types of media: video, images
 * TODO: Detect if media is a video or image
 * TODO: Media Controls: Play/Pause, Mute/Unmute, Volume, Fullscreen, Close
 */
/**
 * DynamicMedia will automatically detect whether the media is a video or image and will handle the media accordingly
 *
 * @param media - Texture | VideoClip - URL of the media to be displayed
 * @param shape - The shape of the media to be displayed
 * @param transform - The position, rotation, and scale of the media to be displayed
 * @param name - The name of the Entity, mainly used for debugging
 * @returns Entity
 * @public
 */
export declare class DynamicMedia extends Entity {
    material: Material;
    shape: Shape;
    texture?: Texture | VideoTexture;
    video?: VideoClip;
    private mediaType?;
    constructor(media: Texture | VideoClip, shape: Shape, transform: TransformConstructorArgs, name?: string);
    initialize(): void;
    updateMedia(media: Texture | VideoClip): void;
    addPausePlayVideo(mediaType: "video" | "image"): void;
    addUIPanel(info: infoData, image: Texture, imageSize: {
        Width: number;
        Height: number;
    }): void;
}

export declare class EnableDisable {
    bEnable: boolean;
    constructor(bEnable?: boolean);
}

/**
 * @public
 * @param title - The title to be displayed in the UI
 * @param owner - The owner, if there is an owner of the image / video
 * @param description - The description of the object this will be displayed in the UI
 * @param link - The link URL that will be opened when the link button is clicked
 * @param linkText - The text for the link button
 */
declare type infoData = {
    title: string;
    description: string;
    owner?: string;
    link?: string;
    linkText?: string;
};

/**
 * setBoxUVs is a function that allows you to set the UVs of a BoxShape, works with Atlas textures.
 *
 * @param rows - The number of rows in the grid or Atlas texture
 * @param cols - The number of columns in the grid or Atlas texture
 * @returns - Returns an array of Vector2s that represent the UVs for a grid of rows and columns
 * @public
 */
export declare function setBoxUVs(rows: number, cols: number): number[];

/**
 * setCustomUVs is a function that allows you to set the UVs of a shape to a custom UV space with offsets.
 *
 * @param rows - The number of rows in the grid
 * @param cols - The number of columns in the grid
 * @param offsetX - The offset the UVs in the X axis or the U axis
 * @param offsetY - The offset the UVs in the Y axis or the V axis
 * @returns - Returns an array of Vector2s that represent the UVs for a grid of rows and columns
 * @public
 */
export declare function setCustomUVs(rows: number, cols: number, offsetX?: number, offsetY?: number): number[];

/**
 * setTimeout is a function that allows you to delay the execution of a function, then removes the entity from the scene.
 *
 * @param delay - The delay in milliseconds
 * @param callback - The callback function to be called after the delay is finished
 * @public
 */
export declare function setTimeout(delay: number, callback: () => void): void;

/**
 * setUVsBasic is a function that allows you to set the UVs of a shape to a basic 0-1 UV space.
 *
 * @param rows - The number of rows in the grid
 * @param cols - The number of columns in the grid
 * @returns - Returns an array of Vector2s that represent the UVs for a grid of rows and columns
 * @public
 */
export declare function setUVsBasic(rows: number, cols: number): number[];

export declare class SwivelMetaServices extends Entity {
    projectId: string;
    apiURL: string;
    startTime: Date;
    endTime?: Date;
    debug: boolean;
    discordHookURL: string;
    sceneName?: string;
    display_name?: string;
    wallet_address?: string;
    room_id?: string;
    guest?: boolean;
    platform?: string;
    realm?: string;
    parcels?: string;
    bInitializeDiscord: boolean;
    bLoadOnEnter: boolean;
    componentObjectPairs: {
        component: string;
        object: any;
    }[];
    once: boolean;
    constructor(projectId: string, debug?: boolean, bInitializeDiscord?: boolean, bLoadOnEnter?: boolean);
    /**
     * @desc Initialize Swivel Meta SDK. This function will get the discordHookUrl from Swivel Meta API
     * then add a listener to the scene which will ping your discord and send the user details to Swivel Meta Cloud
     * @param projectId - The project ID to fetch the config for
     */
    private InitializeSwivelMetaServices;
    InitializeVisitorData(projectId: string): Promise<void>;
    private getDiscordCallbackUrl;
    /**
     * Creates a new fetch request to the Swivel Meta API
     * @param request - The request object to send to the API
     * @returns The payload for the request
     */
    private fetchQuery;
    private submitFetch;
    /**
     * Fetches the config data from the Swivel Meta API
     * @param projectId - The project ID to fetch the config for
     * @returns The config data in JSON format
     */
    private getConfigData;
    private sendDiscordNotification;
    private transferringTipNotificationDiscord;
    private transferTipCompletionNotificationDiscord;
    private generalNotificationDiscord;
    getCurrentUtcEpochTime(): string;
    sendUserDetailsNotification(operationType: any, userId: any): Promise<void>;
    addUserActivitiesListener(projectId: string): void;
    private getVisitorDataBody;
    private assembleVisitorData;
    private parseConfigData;
    updateMediaOnSceneLoad(assign: {
        component: string;
        object: any;
    }[], debug?: boolean): Promise<void>;
    updateMediaOnSceneEnter(assign: {
        component: string;
        object: any;
    }[]): Promise<void>;
}

export { }
